/* 
Exemplos de uso da integra√ß√£o Brasil API
Demonstra as principais funcionalidades dispon√≠veis
*/

/*
import { 
  cepService, 
  cnpjService, 
  cpfService, 
  fipeService, 
  dddService, 
  bancoService, 
  feriadoService, 
  ibgeService,
  brasilApi,
  brasilApiUtils
} from '@/lib/brasilapi';
*/

import { 
  cepService, 
  cnpjService, 
  cpfService, 
  fipeService, 
  dddService, 
  bancoService, 
  feriadoService, 
  ibgeService,
  brasilApi 
} from './index';

// ===== EXEMPLOS FIPE =====
export async function exemplosFipe() {
  console.log('üöó === TESTANDO FIPE ===');

  try {
    // 1. Buscar marcas de carros
    console.log('1. Buscando marcas de carros...');
    const marcasCarros = await fipeService.getMarcas('carros');
    console.log(`‚úÖ Encontradas ${marcasCarros.length} marcas de carros`);
    console.log('Primeiras 5 marcas:', marcasCarros.slice(0, 5));

    // 2. Buscar marcas de motos
    console.log('2. Buscando marcas de motos...');
    const marcasMotos = await fipeService.getMarcas('motos');
    console.log(`‚úÖ Encontradas ${marcasMotos.length} marcas de motos`);
    console.log('Primeiras 3 marcas:', marcasMotos.slice(0, 3));

    // 3. Buscar ve√≠culos de uma marca espec√≠fica (ex: Honda)
    const marcaHonda = marcasCarros.find(m => 
      m.nome.toLowerCase().includes('honda')
    );
    
    if (marcaHonda) {
      console.log('3. Buscando ve√≠culos Honda...');
      const veiculosHonda = await fipeService.getVeiculos('carros', marcaHonda.codigo);
      console.log(`‚úÖ Encontrados ${veiculosHonda.length} ve√≠culos Honda`);
      console.log('Primeiros 3 ve√≠culos:', veiculosHonda.slice(0, 3));

      // 4. Buscar pre√ßo de um ve√≠culo espec√≠fico
      if (veiculosHonda.length > 0) {
        const primeiroVeiculo = veiculosHonda[0];
        console.log('4. Buscando pre√ßo do ve√≠culo...');
        console.log(`Ve√≠culo: ${primeiroVeiculo.nome}`);
        
        const preco = await fipeService.getPreco(primeiroVeiculo.codigoFipe);
        const precoInfo = Array.isArray(preco) ? preco[0] : preco;
        console.log('‚úÖ Pre√ßo encontrado:', {
          valor: precoInfo.valor,
          modelo: precoInfo.modelo,
          anoModelo: precoInfo.anoModelo,
          combustivel: precoInfo.combustivel,
          mesReferencia: precoInfo.mesReferencia
        });

        // 5. Formata√ß√£o de valor
        const valorFormatado = fipeService.formatarValor(precoInfo.valor);
        const valorNumerico = fipeService.extrairValorNumerico(precoInfo.valor);
        console.log('üí∞ Valor formatado:', valorFormatado);
        console.log('üî¢ Valor num√©rico:', valorNumerico);
      }
    }

    // 6. Buscar tabelas FIPE dispon√≠veis
    console.log('6. Buscando tabelas FIPE...');
    const tabelas = await fipeService.getTabelas();
    console.log(`‚úÖ Encontradas ${tabelas.length} tabelas`);
    console.log('√öltima tabela:', tabelas[0]);

    // 7. Busca completa (servi√ßo unificado)
    console.log('7. Testando busca completa...');
    const buscaCompleta = await fipeService.getBuscaCompleta('carros', 'Honda', 'Civic');
    console.log('‚úÖ Busca completa:', {
      marca: buscaCompleta.marca?.nome,
      totalVeiculos: buscaCompleta.veiculo ? 1 : 0,
      totalPrecos: buscaCompleta.preco?.length || 0
    });

  } catch (error) {
    console.error('‚ùå Erro nos exemplos FIPE:', error);
  }
}

// =========== EXEMPLOS DE USO ===========

/**
 * Exemplo 1: Valida√ß√£o autom√°tica de documentos
 */
export async function exemploValidacaoAutomatica() {
  console.log('=== Valida√ß√£o Autom√°tica de Documentos ===\n');

  const documentos = [
    '01234567890',     // CPF
    '12345678000123',  // CNPJ
    '01310-100'        // CEP
  ];

  for (const documento of documentos) {
    try {
      const resultado = await brasilApi.validarDado(documento);
      console.log(`Documento: ${documento}`);
      console.log(`Tipo: ${resultado.tipo.toUpperCase()}`);
      console.log(`V√°lido: ${resultado.valido ? '‚úÖ' : '‚ùå'}`);
      console.log(`Formatado: ${resultado.formatado}`);
      
      if (resultado.dados) {
        console.log('Dados encontrados:');
        if (resultado.tipo === 'cep') {
          const endereco = resultado.dados;
          console.log(`  - Endere√ßo: ${endereco.street || 'N/A'}`);
          console.log(`  - Bairro: ${endereco.neighborhood || 'N/A'}`);
          console.log(`  - Cidade: ${endereco.city}`);
          console.log(`  - Estado: ${endereco.state}`);
        } else if (resultado.tipo === 'cpf') {
          const cpfInfo = resultado.dados;
          console.log(`  - Estado: ${cpfInfo.estado}`);
          console.log(`  - Regi√£o: ${cpfInfo.regiao}`);
        } else if (resultado.tipo === 'cnpj') {
          const empresa = resultado.dados;
          console.log(`  - Raz√£o Social: ${empresa.razao_social}`);
          console.log(`  - Situa√ß√£o: ${empresa.descricao_situacao_cadastral}`);
        }
      }
      
      if (resultado.erro) {
        console.log(`Erro: ${resultado.erro}`);
      }
      
      console.log('---\n');
    } catch (error) {
      console.error(`Erro ao validar ${documento}:`, error);
    }
  }
}

/**
 * Exemplo 2: Valida√ß√£o completa de cliente
 */
export async function exemploValidacaoCliente() {
  console.log('=== Valida√ß√£o Completa de Cliente ===\n');

  const dadosCliente = {
    cpf: '12345678909',
    cnpj: '11222333000181', // CNPJ da Magazine Luiza (exemplo)
    cep: '01310-100'
  };

  try {
    const resultado = await brasilApi.validarCliente(dadosCliente);
    
    console.log(`Cliente v√°lido: ${resultado.valido ? '‚úÖ' : '‚ùå'}`);
    
    if (resultado.cpf) {
      console.log('\nüìÑ CPF:');
      console.log(`  - Formatado: ${resultado.cpf.formatado}`);
      console.log(`  - Estado: ${resultado.cpf.estado}`);
      console.log(`  - Regi√£o: ${resultado.cpf.regiao}`);
    }
    
    if (resultado.cnpj) {
      console.log('\nüè¢ CNPJ:');
      console.log(`  - Raz√£o Social: ${resultado.cnpj.razao_social}`);
      console.log(`  - Nome Fantasia: ${resultado.cnpj.nome_fantasia || 'N/A'}`);
      console.log(`  - Situa√ß√£o: ${resultado.cnpj.descricao_situacao_cadastral}`);
      console.log(`  - Porte: ${resultado.cnpj.descricao_porte}`);
    }
    
    if (resultado.endereco) {
      console.log('\nüìç Endere√ßo:');
      console.log(`  - Logradouro: ${resultado.endereco.street || 'N/A'}`);
      console.log(`  - Bairro: ${resultado.endereco.neighborhood || 'N/A'}`);
      console.log(`  - Cidade: ${resultado.endereco.city}`);
      console.log(`  - Estado: ${resultado.endereco.state}`);
    }
    
    if (resultado.erros.length > 0) {
      console.log('\n‚ùå Erros encontrados:');
      resultado.erros.forEach(erro => console.log(`  - ${erro}`));
    }
    
  } catch (error) {
    console.error('Erro na valida√ß√£o do cliente:', error);
  }
}

/**
 * Exemplo 3: Consulta de ve√≠culo FIPE
 */
export async function exemploConsultaVeiculo() {
  console.log('=== Consulta de Ve√≠culo FIPE ===\n');

  try {
    const resultado = await brasilApi.consultarVeiculo('carros', 'FIAT', 'UNO');
    
    if (resultado.marca) {
      console.log(`üöó Marca encontrada: ${resultado.marca.nome} (${resultado.marca.codigo})`);
    }
    
    if (resultado.veiculo) {
      console.log(`üöô Ve√≠culo: ${resultado.veiculo.nome}`);
      console.log(`   C√≥digo FIPE: ${resultado.veiculo.codigoFipe}`);
    }
    
    if (resultado.preco && resultado.preco.length > 0) {
      const preco = resultado.preco[0];
      console.log('\nüí∞ Pre√ßo FIPE:');
      console.log(`  - Valor: ${resultado.valorFormatado}`);
      console.log(`  - Ano/Modelo: ${preco.anoModelo}`);
      console.log(`  - Combust√≠vel: ${preco.combustivel}`);
      console.log(`  - M√™s Refer√™ncia: ${preco.mesReferencia}`);
      console.log(`  - Valor Num√©rico: R$ ${resultado.valorNumerico?.toLocaleString('pt-BR')}`);
    } else {
      console.log('‚ùå Ve√≠culo n√£o encontrado');
    }
    
  } catch (error) {
    console.error('Erro na consulta do ve√≠culo:', error);
  }
}

/**
 * Exemplo 4: Autocompletar endere√ßo
 */
export async function exemploAutocompletarEndereco() {
  console.log('=== Autocompletar Endere√ßo ===\n');

  const ceps = ['01310-100', '20040-020', '30112-000'];

  for (const cep of ceps) {
    try {
      const resultado = await brasilApi.autocompletarEndereco(cep);
      
      console.log(`CEP: ${cep}`);
      
      if (resultado.success && resultado.endereco) {
        console.log('‚úÖ Endere√ßo encontrado:');
        console.log(`  - Logradouro: ${resultado.endereco.logradouro}`);
        console.log(`  - Bairro: ${resultado.endereco.bairro}`);
        console.log(`  - Cidade: ${resultado.endereco.cidade}`);
        console.log(`  - Estado: ${resultado.endereco.estado}`);
      } else {
        console.log(`‚ùå ${resultado.erro}`);
      }
      
      console.log('---\n');
    } catch (error) {
      console.error(`Erro ao buscar CEP ${cep}:`, error);
    }
  }
}

/**
 * Exemplo 5: Formata√ß√£o inteligente
 */
export function exemploFormatacao() {
  console.log('=== Formata√ß√£o Inteligente ===\n');

  const documentos = [
    '12345678909',      // CPF
    '12345678000123',   // CNPJ
    '01310100',         // CEP
    'abc123',           // Inv√°lido
  ];

  documentos.forEach(doc => {
    const tipo = brasilApi.formatadores.detectarTipo(doc);
    const formatado = brasilApi.formularios.autoFormatar(doc);
    
    console.log(`Original: ${doc}`);
    console.log(`Tipo detectado: ${tipo}`);
    console.log(`Formatado: ${formatado}`);
    console.log('---');
  });
}

/**
 * Exemplo 6: Valida√ß√µes r√°pidas
 */
export async function exemploValidacoesRapidas() {
  console.log('=== Valida√ß√µes R√°pidas ===\n');

  const cpf = '12345678909';
  const cnpj = '11222333000181';
  const cep = '01310-100';

  console.log(`CPF ${cpf} v√°lido: ${brasilApi.validadores.cpf(cpf) ? '‚úÖ' : '‚ùå'}`);
  console.log(`CNPJ ${cnpj} v√°lido: ${await brasilApi.validadores.cnpj(cnpj) ? '‚úÖ' : '‚ùå'}`);
  console.log(`CEP ${cep} v√°lido: ${await brasilApi.validadores.cep(cep) ? '‚úÖ' : '‚ùå'}`);
}

/**
 * Exemplo 7: Uso dos utilit√°rios globais
 */
export async function exemploUtilitarios() {
  console.log('=== Utilit√°rios Globais ===\n');

  // Constantes √∫teis
  console.log('Tipos de ve√≠culo:', brasilApiUtils.TIPOS_VEICULO);
  console.log('Estados do Brasil:', brasilApiUtils.ESTADOS_BRASIL.slice(0, 5), '...');

  // Valida√ß√£o completa de documento
  const documento = '12345678909';
  const resultado = await brasilApiUtils.validarDocumentoCompleto(documento);
  console.log(`\nDocumento ${documento}:`);
  console.log(`V√°lido: ${resultado.valido ? '‚úÖ' : '‚ùå'}`);
  console.log(`Tipo: ${resultado.tipo}`);

  // Formata√ß√£o inteligente
  const documentos = ['12345678909', '12345678000123', '01310100'];
  console.log('\nFormata√ß√£o inteligente:');
  documentos.forEach(doc => {
    console.log(`${doc} ‚Üí ${brasilApiUtils.formatarDocumento(doc)}`);
  });
}

/**
 * Exemplo 8: Valida√ß√£o em tempo real (para formul√°rios)
 */
export function exemploValidacaoTempoReal() {
  console.log('=== Valida√ß√£o em Tempo Real ===\n');

  const cpfParcial = ['1', '12', '123', '1234567890', '12345678909'];
  
  console.log('Simulando digita√ß√£o de CPF:');
  cpfParcial.forEach(cpf => {
    const resultado = brasilApi.formularios.validarCpfTempoReal(cpf);
    console.log(`"${cpf}" ‚Üí Status: ${resultado.status}, Mensagem: ${resultado.mensagem}, Formatado: "${resultado.formatado}"`);
  });
}

// =========== FUN√á√ÉO PRINCIPAL PARA EXECUTAR TODOS OS EXEMPLOS ===========

export async function executarTodosExemplos() {
  console.log('üáßüá∑ DEMONSTRA√á√ÉO COMPLETA DA INTEGRA√á√ÉO BRASIL API üáßüá∑\n');
  console.log('=========================================================\n');

  try {
    await exemploValidacaoAutomatica();
    await exemploValidacaoCliente();
    await exemploConsultaVeiculo();
    await exemploAutocompletarEndereco();
    exemploFormatacao();
    await exemploValidacoesRapidas();
    await exemploUtilitarios();
    exemploValidacaoTempoReal();
    
    console.log('\n‚úÖ Todos os exemplos executados com sucesso!');
    console.log('\nüìö A integra√ß√£o Brasil API est√° funcionando perfeitamente!');
    console.log('üöÄ Voc√™ pode usar essas funcionalidades em seus formul√°rios e valida√ß√µes.');
    
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o dos exemplos:', error);
  }
}

// Para executar os exemplos individualmente, descomente as linhas abaixo:
// exemploValidacaoAutomatica();
// exemploValidacaoCliente();
// exemploConsultaVeiculo();
// exemploAutocompletarEndereco();
// exemploFormatacao();
// exemploValidacoesRapidas();
// exemploUtilitarios();
// exemploValidacaoTempoReal();

// Para executar todos os exemplos:
// executarTodosExemplos();
