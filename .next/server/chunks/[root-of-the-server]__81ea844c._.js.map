{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/viniciusbaldochi1/Desktop/despasys/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['warn', 'error'] : ['error'],\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL\n    }\n  },\n  // Configurações de conexão otimizadas\n  transactionOptions: {\n    timeout: 10000, // 10 segundos\n    maxWait: 5000,  // 5 segundos max wait\n  }\n})\n\n// Função para executar queries com retry automático\nexport async function executeWithRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries = 3,\n  delay = 1000\n): Promise<T> {\n  let lastError: Error\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation()\n    } catch (error: any) {\n      lastError = error\n      \n      // Se for erro de conexão, tentar reconectar\n      if (error.code === 'P1017' || error.message?.includes('closed')) {\n        console.warn(`Database connection closed (attempt ${attempt}/${maxRetries}), reconnecting...`)\n        try {\n          await prisma.$disconnect()\n          await new Promise(resolve => setTimeout(resolve, delay))\n          await prisma.$connect()\n        } catch (reconnectError) {\n          console.warn('Reconnection failed:', reconnectError)\n        }\n      } else {\n        console.warn(`Database operation failed (attempt ${attempt}/${maxRetries}):`, error.message)\n      }\n      \n      if (attempt === maxRetries) {\n        throw lastError\n      }\n      \n      // Exponential backoff\n      await new Promise(resolve => setTimeout(resolve, delay * attempt))\n    }\n  }\n  \n  throw lastError!\n}\n\n// Configurar graceful shutdown apenas uma vez\nif (typeof window === 'undefined') {\n  let shutdownHandlersAdded = false\n  \n  if (!shutdownHandlersAdded) {\n    shutdownHandlersAdded = true\n    \n    process.on('SIGINT', async () => {\n      console.log('Received SIGINT, disconnecting from database...')\n      await prisma.$disconnect()\n      process.exit(0)\n    })\n    \n    process.on('SIGTERM', async () => {\n      console.log('Received SIGTERM, disconnecting from database...')\n      await prisma.$disconnect()\n      process.exit(0)\n    })\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAQ;KAAQ,GAAG;IAClE,aAAa;QACX,IAAI;YACF,KAAK,QAAQ,GAAG,CAAC,YAAY;QAC/B;IACF;IACA,sCAAsC;IACtC,oBAAoB;QAClB,SAAS;QACT,SAAS;IACX;AACF;AAGO,eAAe,iBACpB,SAA2B,EAC3B,aAAa,CAAC,EACd,QAAQ,IAAI;IAEZ,IAAI;IAEJ,IAAK,IAAI,UAAU,GAAG,WAAW,YAAY,UAAW;QACtD,IAAI;YACF,OAAO,MAAM;QACf,EAAE,OAAO,OAAY;YACnB,YAAY;YAEZ,4CAA4C;YAC5C,IAAI,MAAM,IAAI,KAAK,WAAW,MAAM,OAAO,EAAE,SAAS,WAAW;gBAC/D,QAAQ,IAAI,CAAC,CAAC,oCAAoC,EAAE,QAAQ,CAAC,EAAE,WAAW,kBAAkB,CAAC;gBAC7F,IAAI;oBACF,MAAM,OAAO,WAAW;oBACxB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;oBACjD,MAAM,OAAO,QAAQ;gBACvB,EAAE,OAAO,gBAAgB;oBACvB,QAAQ,IAAI,CAAC,wBAAwB;gBACvC;YACF,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,mCAAmC,EAAE,QAAQ,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,MAAM,OAAO;YAC7F;YAEA,IAAI,YAAY,YAAY;gBAC1B,MAAM;YACR;YAEA,sBAAsB;YACtB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,QAAQ;QAC3D;IACF;IAEA,MAAM;AACR;AAEA,8CAA8C;AAC9C,wCAAmC;IACjC,IAAI,wBAAwB;IAE5B,IAAI,CAAC,uBAAuB;QAC1B,wBAAwB;QAExB,QAAQ,EAAE,CAAC,UAAU;YACnB,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,WAAW;YACxB,QAAQ,IAAI,CAAC;QACf;QAEA,QAAQ,EAAE,CAAC,WAAW;YACpB,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,WAAW;YACxB,QAAQ,IAAI,CAAC;QACf;IACF;AACF;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///Users/viniciusbaldochi1/Desktop/despasys/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport { prisma } from './prisma'\nimport bcrypt from 'bcryptjs'\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' },\n        tenantDomain: { label: 'Tenant', type: 'text' }\n      },\n      async authorize(credentials: Record<string, string> | undefined) {\n        if (!credentials?.email || !credentials?.password || !credentials?.tenantDomain) {\n          return null\n        }\n\n        try {\n          // Buscar tenant primeiro\n          const tenant = await (prisma as any).tenant.findUnique({\n            where: { domain: credentials.tenantDomain }\n          })\n\n          if (!tenant) {\n            console.error('Tenant não encontrado:', credentials.tenantDomain)\n            return null\n          }\n\n          if (tenant.status !== 'ACTIVE' && tenant.status !== 'TRIAL') {\n            console.error('Tenant inativo:', tenant.status)\n            return null\n          }\n\n          // Buscar usuário do tenant\n          const user = await (prisma as any).user.findFirst({\n            where: {\n              email: credentials.email,\n              tenantId: tenant.id,\n              status: 'ATIVO'\n            },\n            include: {\n              tenant: {\n                select: {\n                  id: true,\n                  name: true,\n                  domain: true,\n                  plan: true\n                }\n              }\n            }\n          })\n\n          if (!user) {\n            console.error('Usuário não encontrado:', credentials.email)\n            return null\n          }\n\n          // Verificar senha\n          if (!user.password) {\n            console.error('Usuário sem senha')\n            return null\n          }\n\n          const isPasswordValid = await bcrypt.compare(credentials.password, user.password)\n\n          if (!isPasswordValid) {\n            console.error('Senha inválida')\n            return null\n          }\n\n          // Retornar dados do usuário para a sessão\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            tenantId: (user as any).tenantId,\n            tenant: (user as any).tenant\n          } as any\n        } catch (error) {\n          console.error('Erro na autenticação:', error)\n          return null\n        }\n      }\n    })\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: 24 * 60 * 60, // 24 horas\n    updateAge: 60 * 60, // Atualizar a cada 1 hora\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role\n        token.tenantId = user.tenantId\n        token.tenant = user.tenant\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.sub || ''\n        session.user.role = token.role as string\n        session.user.tenantId = token.tenantId as string\n        session.user.tenant = token.tenant as any\n      }\n      return session\n    }\n  },\n  pages: {\n    signIn: '/auth/login',\n    error: '/auth/login'\n  },\n  secret: process.env.NEXTAUTH_SECRET\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file:///Users/viniciusbaldochi1/Desktop/despasys/src/app/api/financeiro/transacoes/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Não autorizado' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id },\n      include: { tenant: true }\n    });\n\n    if (!user) {\n      return NextResponse.json({ error: 'Usuário não encontrado' }, { status: 404 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const tipo = searchParams.get('tipo');\n    const status = searchParams.get('status');\n    const search = searchParams.get('search');\n\n    const skip = (page - 1) * limit;\n\n    // Construir filtros\n    const where: any = {\n      tenantId: user.tenantId\n    };\n\n    if (tipo && (tipo === 'RECEITA' || tipo === 'DESPESA')) {\n      where.tipo = tipo;\n    }\n\n    if (status) {\n      where.status = status;\n    }\n\n    if (search) {\n      where.OR = [\n        { descricao: { contains: search, mode: 'insensitive' } },\n        { categoria: { contains: search, mode: 'insensitive' } },\n        { customer: { name: { contains: search, mode: 'insensitive' } } }\n      ];\n    }\n\n    // Buscar transações\n    const [transacoes, total] = await Promise.all([\n      prisma.transacao.findMany({\n        where,\n        include: {\n          customer: {\n            select: {\n              id: true,\n              name: true\n            }\n          },\n          processo: {\n            select: {\n              id: true,\n              numero: true\n            }\n          }\n        },\n        orderBy: {\n          dataVencimento: 'desc'\n        },\n        skip,\n        take: limit\n      }),\n      prisma.transacao.count({ where })\n    ]);\n\n    return NextResponse.json({\n      transacoes: transacoes.map((t: any) => ({\n        id: t.id,\n        numero: t.numero,\n        descricao: t.descricao,\n        categoria: t.categoria,\n        valor: t.valor,\n        tipo: t.tipo,\n        status: t.status,\n        dataVencimento: t.dataVencimento,\n        dataPagamento: t.dataPagamento,\n        metodoPagamento: t.metodoPagamento,\n        cliente: t.customer,\n        processo: t.processo,\n        createdAt: t.createdAt\n      })),\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar transações:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Não autorizado' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id }\n    });\n\n    if (!user) {\n      return NextResponse.json({ error: 'Usuário não encontrado' }, { status: 404 });\n    }\n\n    const data = await request.json();\n    const {\n      tipo,\n      categoria,\n      descricao,\n      valor,\n      dataVencimento,\n      customerId,\n      processoId,\n      metodoPagamento,\n      observacoes\n    } = data;\n\n    // Validações básicas\n    if (!tipo || !categoria || !descricao || !valor || !dataVencimento) {\n      return NextResponse.json(\n        { error: 'Campos obrigatórios não preenchidos' },\n        { status: 400 }\n      );\n    }\n\n    if (valor <= 0) {\n      return NextResponse.json(\n        { error: 'Valor deve ser maior que zero' },\n        { status: 400 }\n      );\n    }\n\n    // Gerar número único para a transação\n    const count = await prisma.transacao.count({\n      where: { tenantId: user.tenantId }\n    });\n    const numero = `${tipo.charAt(0)}${String(count + 1).padStart(6, '0')}`;\n\n    const transacao = await prisma.transacao.create({\n      data: {\n        tenantId: user.tenantId,\n        numero,\n        tipo,\n        categoria,\n        descricao,\n        valor: parseFloat(valor),\n        dataVencimento: new Date(dataVencimento),\n        customerId: customerId || null,\n        processoId: processoId || null,\n        metodoPagamento: metodoPagamento || null,\n        observacoes: observacoes || null,\n        status: 'PENDENTE'\n      },\n      include: {\n        customer: {\n          select: {\n            id: true,\n            name: true\n          }\n        },\n        processo: {\n          select: {\n            id: true,\n            numero: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json({\n      transacao: {\n        id: transacao.id,\n        numero: transacao.numero,\n        descricao: transacao.descricao,\n        categoria: transacao.categoria,\n        valor: transacao.valor,\n        tipo: transacao.tipo,\n        status: transacao.status,\n        dataVencimento: transacao.dataVencimento,\n        cliente: transacao.customer,\n        processo: transacao.processo\n      }\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Erro ao criar transação:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}